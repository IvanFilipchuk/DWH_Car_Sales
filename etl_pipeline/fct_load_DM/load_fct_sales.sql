CREATE TABLE IF NOT EXISTS BL_DM.FCT_SALES_2022_Q2 PARTITION OF BL_DM.FCT_SALES
FOR VALUES FROM (4500) TO (4594); 

CREATE TABLE IF NOT EXISTS BL_DM.FCT_SALES_2022_Q3 PARTITION OF BL_DM.FCT_SALES
FOR VALUES FROM (4594) TO (4687);  

CREATE TABLE IF NOT EXISTS BL_DM.FCT_SALES_2022_Q4 PARTITION OF BL_DM.FCT_SALES
FOR VALUES FROM (4687) TO (4777);  

CREATE TABLE IF NOT EXISTS BL_DM.FCT_SALES_2023_Q1 PARTITION OF BL_DM.FCT_SALES
FOR VALUES FROM (4777) TO (4868);  

CREATE TABLE IF NOT EXISTS BL_DM.FCT_SALES_2023_Q2 PARTITION OF BL_DM.FCT_SALES
FOR VALUES FROM (4868) TO (4959);  

CREATE TABLE IF NOT EXISTS BL_DM.FCT_SALES_2023_Q3 PARTITION OF BL_DM.FCT_SALES
FOR VALUES FROM (4959) TO (5051); 

CREATE TABLE IF NOT EXISTS BL_DM.FCT_SALES_2023_Q4 PARTITION OF BL_DM.FCT_SALES
FOR VALUES FROM (5051) TO (5143);  

CREATE TABLE IF NOT EXISTS BL_DM.FCT_SALES_2024_Q1 PARTITION OF BL_DM.FCT_SALES
FOR VALUES FROM (5143) TO (5235);  

CREATE TABLE IF NOT EXISTS BL_DM.FCT_SALES_2024_Q2 PARTITION OF BL_DM.FCT_SALES
FOR VALUES FROM (5235) TO (5300); 


CREATE OR REPLACE PROCEDURE BL_CL.LOAD_FCT_SALES_DM_PARTITIONED(
    p_date_from INTEGER,
    p_date_to INTEGER,
    p_partition_name TEXT
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_rows_inserted INTEGER := 0;
    v_partition_table TEXT;
BEGIN
	BEGIN
    RAISE NOTICE 'Starting LOAD_FCT_SALES_DM_PARTITIONED for date range: % - %', p_date_from, p_date_to;
    
    v_partition_table := p_partition_name;

	RAISE NOTICE 'Resetting sequence to 1...';
	EXECUTE 'SELECT setval(''bl_dm.fct_sales_seq'', 1)';
	
    EXECUTE 'ALTER TABLE BL_DM.FCT_SALES DETACH PARTITION ' || v_partition_table;
    
    RAISE NOTICE 'Partition % detached. Truncating...', v_partition_table;
    
    EXECUTE 'TRUNCATE ' || v_partition_table;
    
    RAISE NOTICE 'Loading data into partition...';
    
    EXECUTE '
    INSERT INTO ' || v_partition_table || ' (
        SALE_SURR_ID, SALE_SRC_ID, CUSTOMER_SURR_ID, EMPLOYEE_SURR_ID, CAR_SURR_ID,
        DEALER_SURR_ID, DATE_SURR_ID, PAYMENT_METHOD_SURR_ID, SALES_CHANNEL_SURR_ID,
        SALE_PRICE, COMMISSION_RATE, COMMISSION_EARNED, REDUCTION_PERCENT, INCOME,
        CALC_DISCOUNT_VALUE, CALC_COMMISSION_CHECK, INSERT_DT, SOURCE_ID, 
        SOURCE_SYSTEM, SOURCE_ENTITY
    )
    SELECT 
        NEXTVAL(''bl_dm.fct_sales_seq''),
        s.SALE_SRC_ID,
        COALESCE(dc.CUSTOMER_SURR_ID, -1),
        COALESCE(de.EMPLOYEE_SURR_ID, -1),
        COALESCE(dcar.CAR_SURR_ID, -1),
        COALESCE(dd.DEALER_SURR_ID, -1),
        COALESCE(ddate.DATE_SURR_ID, -1),
        COALESCE(dpm.PAYMENT_METHOD_SURR_ID, -1),
        COALESCE(dsc.SALES_CHANNEL_SURR_ID, -1),
        s.SALE_PRICE,
        s.COMMISSION_RATE,
        s.COMMISSION_EARNED,
        s.REDUCTION_PERCENT,
        s.INCOME,
        CASE 
            WHEN s.SALE_PRICE IS NOT NULL AND s.REDUCTION_PERCENT IS NOT NULL 
            THEN s.SALE_PRICE * (s.REDUCTION_PERCENT / 100)
            ELSE 0::DECIMAL(12,2)
        END,
        CASE 
            WHEN s.SALE_PRICE IS NOT NULL AND s.COMMISSION_RATE IS NOT NULL 
            THEN s.SALE_PRICE * (s.COMMISSION_RATE / 100)
            ELSE 0::DECIMAL(12,2)
        END,
        CURRENT_DATE,
        s.SOURCE_ID,
        ''BL_3NF'',
        ''CE_SALES''
    FROM BL_3NF.CE_SALES s
    LEFT JOIN BL_DM.DIM_CUSTOMERS_SDC dc ON s.CUSTOMER_ID = dc.CUSTOMER_SRC_ID::INTEGER 
        AND dc.IS_ACTIVE = ''Y''
    LEFT JOIN BL_DM.DIM_EMPLOYEES de ON s.EMPLOYEE_ID = de.EMPLOYEE_SRC_ID::INTEGER
    LEFT JOIN BL_DM.DIM_CARS dcar ON s.CAR_ID = dcar.CAR_SRC_ID::INTEGER
    LEFT JOIN BL_DM.DIM_DEALERS dd ON s.DEALER_ID = dd.DEALER_SRC_ID::INTEGER
    LEFT JOIN BL_DM.DIM_DATES ddate ON s.DATE_ID = ddate.DATE_SURR_ID
    LEFT JOIN BL_DM.DIM_PAYMENT_METHODS dpm ON s.PAYMENT_METHOD_ID = dpm.PAYMENT_METHOD_SRC_ID::INTEGER
    LEFT JOIN BL_DM.DIM_SALES_CHANNELS dsc ON s.SALES_CHANNEL_ID = dsc.SALES_CHANNEL_SRC_ID::INTEGER
    WHERE s.DATE_ID BETWEEN $1 AND $2'
    USING p_date_from, p_date_to;

    GET DIAGNOSTICS v_rows_inserted = ROW_COUNT;
    
    RAISE NOTICE 'Data loaded. Attaching partition...';
    
    EXECUTE 'ALTER TABLE BL_DM.FCT_SALES ATTACH PARTITION ' || v_partition_table || 
            ' FOR VALUES FROM (' || p_date_from || ') TO (' || (p_date_to + 1) || ')';
    
    RAISE NOTICE 'Finished loading FCT_SALES_DM_PARTITIONED. Inserted: %', v_rows_inserted;

    CALL BL_CL.LOG_PROCEDURE(
        'LOAD_FCT_SALES_DM_PARTITIONED',
        v_rows_inserted,
        'Successfully loaded FCT_SALES_DM_PARTITIONED for period ' || p_date_from || '-' || p_date_to || '. Inserted: ' || v_rows_inserted,
        'Success'
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Error in LOAD_FCT_SALES_DM_PARTITIONED: %', SQLERRM;
        CALL BL_CL.LOG_PROCEDURE(
            'LOAD_FCT_SALES_DM_PARTITIONED',
            -1,
            'Error: ' || SQLERRM,
            'Error'
        );
        RAISE;
	END;		
END;
$$;


CALL BL_CL.LOAD_FCT_SALES_DM_PARTITIONED(4500, 4593, 'BL_DM.FCT_SALES_2022_Q2');
CALL BL_CL.LOAD_FCT_SALES_DM_PARTITIONED(4594, 4686, 'BL_DM.FCT_SALES_2022_Q3');
CALL BL_CL.LOAD_FCT_SALES_DM_PARTITIONED(4687, 4776, 'BL_DM.FCT_SALES_2022_Q4');
CALL BL_CL.LOAD_FCT_SALES_DM_PARTITIONED(4777, 4867, 'BL_DM.FCT_SALES_2023_Q1');
CALL BL_CL.LOAD_FCT_SALES_DM_PARTITIONED(4868, 4958, 'BL_DM.FCT_SALES_2023_Q2');
CALL BL_CL.LOAD_FCT_SALES_DM_PARTITIONED(4959, 5050, 'BL_DM.FCT_SALES_2023_Q3');
CALL BL_CL.LOAD_FCT_SALES_DM_PARTITIONED(5051, 5142, 'BL_DM.FCT_SALES_2023_Q4');
CALL BL_CL.LOAD_FCT_SALES_DM_PARTITIONED(5143, 5234, 'BL_DM.FCT_SALES_2024_Q1');
CALL BL_CL.LOAD_FCT_SALES_DM_PARTITIONED(5235, 5299, 'BL_DM.FCT_SALES_2024_Q2');


SELECT * FROM BL_CL.LOG_TABLE 
WHERE procedure_name = 'LOAD_FCT_SALES_DM_PARTITIONED'
ORDER BY execution_time DESC;

SELECT * FROM BL_DM.FCT_SALES